#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include <fstream>
#include <string.h>

using namespace std;

struct Forest {
    int weight;
    int root;
    unsigned char znak;
};

Forest forest[513];

struct Tree {
    int left;
    int right;
    int parent;
    unsigned char znak;
};

Tree tree[513];

FILE *f;
FILE *g;

struct Code {
    vector <bool> shifr;
};

Code code[513];

pair <int, int> Get_Min(int size_forest, int pos1, int pos2) {
    if (forest[1].weight < forest[pos1].weight)
        pos1 = 1;
    else
        pos2 = 1;

    for (int i = 2; i <= size_forest; i++) {
        if (forest[i].weight < forest[pos1].weight) {
            pos2 = pos1;
            pos1 = i;
        } else if (forest[i].weight < forest[pos2].weight || pos2 == pos1 && i > 0) {
            pos2 = i;
        }
    }
    return make_pair(pos1, pos2);
}

void archivator () {
    int freq[513];

    // clean array
    for (int i = 0; i < 513; i++) {
        freq[i] = 0;
    }

    // count frequency
    unsigned char ch;
    while (fscanf(f, "%c", &ch) != -1) {
        freq[ch]++;
    }

    // build forest
    int size_forest = -1;
    for (int i = 0; i < 513; i++) {
        if (freq[i] > 0) {
            size_forest++;
            forest[size_forest].root = size_forest;
            forest[size_forest].weight = freq[i];
            forest[size_forest].znak = i;
        }
    }

    // tree's leaves
    for (int i = 0; i <= size_forest; i++) {
        tree[i].left = -1;
        tree[i].right = -1;
        tree[i].parent = -1;
        tree[i].znak = forest[i].znak;
    }

    // build tree
    int size_tree = size_forest;
    int cnt = size_forest;
    while (size_forest > 0) {
        auto p = Get_Min(size_forest, 0, 0);
        size_tree++;
        tree[size_tree].left = forest[p.first].root;
        tree[size_tree].right = forest[p.second].root;
        tree[size_tree].parent = -1;
        tree[forest[p.first].root].parent = size_tree;
        tree[forest[p.second].root].parent = size_tree;
        forest[p.first].weight += forest[p.second].weight;
        forest[p.first].root = size_tree;
        forest[p.second] = forest[size_forest];
        size_forest--;
    }

    // code
    int v;
    for (int i = 0; i <= cnt; i++) {
        v = i;
        while (tree[v].parent != -1) {
            if (tree[tree[v].parent].left == v) {
                code[tree[i].znak].shifr.push_back(0);
            } else if (tree[tree[v].parent].right == v) {
                code[tree[i].znak].shifr.push_back(1);
            } else
                break;
            v = tree[v].parent;
        }
        reverse(code[tree[i].znak].shifr.begin(), code[tree[i].znak].shifr.end());
    }

    rewind(f);
    rewind(g);

    // print in output.txt
    for (int i = 0; i < 513; i++) {
        fprintf(g, "%d ", freq[i]);
    }

    unsigned char byte = 0;
    short int eight = 0;
    while (fscanf(f, "%c", &ch) != -1) {
        for (int i = 0; i < code[ch].shifr.size(); i++) {
            byte <<= 1;
            byte += code[ch].shifr[i];
            eight++;
            if (eight == 8) {
                fprintf(g, "%c", byte);
                eight = 0;
                byte = 0;
            }
        }
    }
    if (eight > 0) {
        byte <<= (8 - eight);
        fprintf(g, "%c", byte);
    }
}

void razarchivator () {
    int freq[513];

    // clean frequency array
    for (int i = 0; i < 513; i++) {
        freq[i] = 0;
    }

    // read frequency array
    int frequency;
    unsigned char space;
    long long kol = 0;
    for (int i = 0; i < 513; i++) {
        fscanf(f, "%d", &frequency);
        fscanf(f, "%c", &space);
        freq[i] = frequency;
        kol += frequency;
    }

    int size_forest = -1;

    // build forest
    for (int i = 0; i < 513; i++) {
        if (freq[i] > 0) {
            size_forest++;
            forest[size_forest].root = size_forest;
            forest[size_forest].weight = freq[i];
            forest[size_forest].znak = i;
        }
    }

    // tree's leaves
    for (int i = 0; i <= size_forest; i++) {
        tree[i].left = -1;
        tree[i].right = -1;
        tree[i].parent = -1;
        tree[i].znak = forest[i].znak;
    }

    // build tree
    int size_tree = size_forest;
    int cnt = size_forest;
    while (size_forest > 0) {
        auto p = Get_Min(size_forest, 0, 0);
        size_tree++;
        tree[size_tree].left = forest[p.first].root;
        tree[size_tree].right = forest[p.second].root;
        tree[size_tree].parent = -1;
        tree[forest[p.first].root].parent = size_tree;
        tree[forest[p.second].root].parent = size_tree;
        forest[p.first].weight += forest[p.second].weight;
        forest[p.first].root = size_tree;
        forest[p.second] = forest[size_forest];
        size_forest--;
    }

    // code
    int v;
    int versh = -1;
    for (int i = 0; i <= cnt; i++) {
        v = i;
        while (tree[v].parent != -1) {
            if (tree[tree[v].parent].left == v) {
                code[tree[i].znak].shifr.push_back(0);
            } else if (tree[tree[v].parent].right == v) {
                code[tree[i].znak].shifr.push_back(1);
            } else
                break;
            v = tree[v].parent;
        }
        if (versh == -1)
            versh = v;
        reverse(code[tree[i].znak].shifr.begin(), code[tree[i].znak].shifr.end());
    }

    int cur = versh;
    unsigned char znak;
    while (kol > 0) {
        fscanf(f, "%c", &znak);
        for (int i = 7; i >= 0; i--) {
            if (kol <= 0)
                return;
            if ((1 << i) & znak) {
                cur = tree[cur].right;
            } else {
                cur = tree[cur].left;
            }
            if (tree[cur].left == -1 && tree[cur].right == -1) {
                fprintf(g, "%c", tree[cur].znak);
                cur = versh;
                kol--;
            }
        }
    }
}

int32_t main(int argc, char *argv[]) {

    cout.tie(nullptr);
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);

    if (!strcmp("encode", argv[1])) {
        f = fopen(argv[3], "rb");
        g = fopen(argv[2], "wb");

        archivator();
    } else {
        f = fopen(argv[2], "rb");
        g = fopen(argv[3], "wb");

        razarchivator();
    }

    /* string s;
    cin >> s;
    if (s == "encode") {
        f = fopen("test.jpg", "rb");
        g = fopen("output.txt", "wb");

        archivator();
    }
    else {
        f = fopen("output.txt", "rb");
        g = fopen("test1.jpg", "wb");

        razarchivator();
    } */
    return 0;
}
